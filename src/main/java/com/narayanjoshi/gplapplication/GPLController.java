package com.narayanjoshi.gplapplication;

import com.narayanjoshi.gplapplication.service.GPLShowMessage;
import com.narayanjoshi.gplapplication.service.command.ReadFromFileCommand;
import com.narayanjoshi.gplapplication.service.command.SaveToFileCommand;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

import java.io.File;

/**
 * The {@code GPLController} class is a controller to handle all type of
 * event generated by GPL application using UI.
 *
 * @author Narayan Joshi
 * @since v1.0
 * */
public class GPLController {

    /**
     * This canvasId is responsible for making all shapes and performing output on the display box.
     * @see Canvas for more information
     * */
    @FXML
    public Canvas canvasId;

    /**
     * This inputMultipleCodeText holds multiple line code for further processing.
     * @see TextArea for more information
     * */
    @FXML
    private TextArea inputMultipleCodeText;

    /**
     * This inputSingleCodeText holds single line code for further processing.
     * @see TextField for more information
     * */
    @FXML
    private TextField inputSingleCodeText;

    /**
     * The run button form GLP application is the entry point for processing as per the given instruction
     * */
    @FXML
    protected void onRunButtonClick() {

        String commandSingle = inputSingleCodeText.getText();
        String commandMultiple = inputMultipleCodeText.getText();

        CommandParser commandParser= new CommandParser(canvasId, commandSingle, commandMultiple);
        commandParser.run();
    }

    /**
     * The syntax button form GLP application is the entry point for validating all the command by the user input.
     * */
    @FXML
    protected void onSyntaxButtonClick() {

        String commandSingle = inputSingleCodeText.getText();
        String commandMultiple = inputMultipleCodeText.getText();

        CommandParser commandParser= new CommandParser(canvasId, commandSingle, commandMultiple);
        commandParser.syntax();
    }

    /**
     * The save command button form GLP application will save the given instruction to a file path.
     * */
    @FXML
    protected void onSaveCommandButtonClick() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setInitialDirectory(new File("C:/"));
        fileChooser.setTitle("Save your command to file");
        fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("Text Files", "*.txt"));
        fileChooser.setInitialFileName("gpl_application_command");

        File file = fileChooser.showSaveDialog(new Stage());
        //cancel the file chooser without saving file
        if (file == null) {
            throw new CommandNotFound( "File has not saved.", -5);
        }

        String commandSingle = inputSingleCodeText.getText();
        String commandMultiple = inputMultipleCodeText.getText();

        Util.saveContentToFile(file.getAbsolutePath(), commandSingle+"\n"+commandMultiple);
        GPLShowMessage.showSuccess("File saved successfully.");

    }

    /**
     * The open file button form GLP application will open file and read all instruction from particular file.
     * */
    @FXML
    protected void onOpenFileButtonClick() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setInitialDirectory(new File("C:/"));
        fileChooser.setTitle("Load your saved command from file");
        fileChooser.getExtensionFilters().addAll(new FileChooser.ExtensionFilter("Text Files", "*.txt"));


        File file = fileChooser.showOpenDialog(new Stage());
        //cancel the file chooser without saving file
        if (file == null) {
            throw new CommandNotFound( "File has not selected or canceled.", -5);
        }
        String readCommand = Util.readFromFile(file.getAbsolutePath());
        inputMultipleCodeText.setText(readCommand);
        GPLShowMessage.showSuccess("File read successfully.");
    }

    /**
     * The close button form GLP application will close the application.
     * */
    @FXML
    public void doExit(ActionEvent event) {
        Platform.exit();
        System.exit(0);
    }

}